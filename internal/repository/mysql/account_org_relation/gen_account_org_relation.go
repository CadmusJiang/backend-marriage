///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package account_org_relation

import (
	"fmt"

	"github.com/xinliangnote/go-gin-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *AccountOrgRelation {
	return new(AccountOrgRelation)
}

func NewQueryBuilder() *accountOrgRelationQueryBuilder {
	return new(accountOrgRelationQueryBuilder)
}

func (t *AccountOrgRelation) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return int32(t.Id), nil
}

type accountOrgRelationQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *accountOrgRelationQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *accountOrgRelationQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&AccountOrgRelation{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *accountOrgRelationQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&AccountOrgRelation{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *accountOrgRelationQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&AccountOrgRelation{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *accountOrgRelationQueryBuilder) First(db *gorm.DB) (*AccountOrgRelation, error) {
	ret := &AccountOrgRelation{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *accountOrgRelationQueryBuilder) QueryOne(db *gorm.DB) (*AccountOrgRelation, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *accountOrgRelationQueryBuilder) QueryAll(db *gorm.DB) ([]*AccountOrgRelation, error) {
	var ret []*AccountOrgRelation
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *accountOrgRelationQueryBuilder) Limit(limit int) *accountOrgRelationQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *accountOrgRelationQueryBuilder) Offset(offset int) *accountOrgRelationQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereId(p mysql.Predicate, value uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereIdIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereIdNotIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) OrderById(asc bool) *accountOrgRelationQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereAccountId(p mysql.Predicate, value uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "account_id", p),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereAccountIdIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "account_id", "IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereAccountIdNotIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "account_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) OrderByAccountId(asc bool) *accountOrgRelationQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "account_id "+order)
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereOrgId(p mysql.Predicate, value uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_id", p),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereOrgIdIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_id", "IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereOrgIdNotIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) OrderByOrgId(asc bool) *accountOrgRelationQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "org_id "+order)
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereRelationType(p mysql.Predicate, value string) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "relation_type", p),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereRelationTypeIn(value []string) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "relation_type", "IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereRelationTypeNotIn(value []string) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "relation_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) OrderByRelationType(asc bool) *accountOrgRelationQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "relation_type "+order)
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereStatus(p mysql.Predicate, value uint32) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereStatusIn(value []uint32) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereStatusNotIn(value []uint32) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) OrderByStatus(asc bool) *accountOrgRelationQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereCreatedTimestamp(p mysql.Predicate, value uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_timestamp", p),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereCreatedTimestampIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_timestamp", "IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereCreatedTimestampNotIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_timestamp", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) OrderByCreatedTimestamp(asc bool) *accountOrgRelationQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_timestamp "+order)
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereModifiedTimestamp(p mysql.Predicate, value uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modified_timestamp", p),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereModifiedTimestampIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modified_timestamp", "IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereModifiedTimestampNotIn(value []uint64) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modified_timestamp", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) OrderByModifiedTimestamp(asc bool) *accountOrgRelationQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "modified_timestamp "+order)
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereCreatedUser(p mysql.Predicate, value string) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", p),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereCreatedUserIn(value []string) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereCreatedUserNotIn(value []string) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) OrderByCreatedUser(asc bool) *accountOrgRelationQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_user "+order)
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereUpdatedUser(p mysql.Predicate, value string) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", p),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereUpdatedUserIn(value []string) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) WhereUpdatedUserNotIn(value []string) *accountOrgRelationQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountOrgRelationQueryBuilder) OrderByUpdatedUser(asc bool) *accountOrgRelationQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_user "+order)
	return qb
}
