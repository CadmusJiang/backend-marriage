///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package account

import (
	"fmt"

	"github.com/xinliangnote/go-gin-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Account {
	return new(Account)
}

func NewQueryBuilder() *accountQueryBuilder {
	return new(accountQueryBuilder)
}

func (t *Account) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type accountQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *accountQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *accountQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Account{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *accountQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Account{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *accountQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Account{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *accountQueryBuilder) First(db *gorm.DB) (*Account, error) {
	ret := &Account{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *accountQueryBuilder) QueryOne(db *gorm.DB) (*Account, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *accountQueryBuilder) QueryAll(db *gorm.DB) ([]*Account, error) {
	var ret []*Account
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *accountQueryBuilder) Limit(limit int) *accountQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *accountQueryBuilder) Offset(offset int) *accountQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *accountQueryBuilder) WhereId(p mysql.Predicate, value int32) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereIdIn(value []int32) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereIdNotIn(value []int32) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderById(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereUsername(p mysql.Predicate, value string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereUsernameIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereUsernameNotIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByUsername(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "username "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereNickname(p mysql.Predicate, value string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereNicknameIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereNicknameNotIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByNickname(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "nickname "+order)
	return qb
}

func (qb *accountQueryBuilder) WherePassword(p mysql.Predicate, value string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WherePasswordIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WherePasswordNotIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByPassword(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "password "+order)
	return qb
}

func (qb *accountQueryBuilder) WherePhone(p mysql.Predicate, value string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WherePhoneIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WherePhoneNotIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByPhone(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "phone "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereRoleType(p mysql.Predicate, value string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "role_type", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereRoleTypeIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "role_type", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereRoleTypeNotIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "role_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByRoleType(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "role_type "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereStatus(p mysql.Predicate, value string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereStatusIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereStatusNotIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByStatus(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereBelongGroupId(p mysql.Predicate, value int32) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "belong_group_id", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereBelongGroupIdIn(value []int32) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "belong_group_id", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereBelongGroupIdNotIn(value []int32) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "belong_group_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByBelongGroupId(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "belong_group_id "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereBelongTeamId(p mysql.Predicate, value int32) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "belong_team_id", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereBelongTeamIdIn(value []int32) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "belong_team_id", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereBelongTeamIdNotIn(value []int32) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "belong_team_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByBelongTeamId(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "belong_team_id "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereLastLoginTimestamp(p mysql.Predicate, value int64) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "last_login_timestamp", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereLastLoginTimestampIn(value []int64) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "last_login_timestamp", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereLastLoginTimestampNotIn(value []int64) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "last_login_timestamp", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByLastLoginTimestamp(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "last_login_timestamp "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereCreatedTimestamp(p mysql.Predicate, value int64) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_timestamp", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereCreatedTimestampIn(value []int64) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_timestamp", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereCreatedTimestampNotIn(value []int64) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_timestamp", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByCreatedTimestamp(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_timestamp "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereModifiedTimestamp(p mysql.Predicate, value int64) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modified_timestamp", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereModifiedTimestampIn(value []int64) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modified_timestamp", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereModifiedTimestampNotIn(value []int64) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modified_timestamp", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByModifiedTimestamp(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "modified_timestamp "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereCreatedUser(p mysql.Predicate, value string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereCreatedUserIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereCreatedUserNotIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByCreatedUser(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_user "+order)
	return qb
}

func (qb *accountQueryBuilder) WhereUpdatedUser(p mysql.Predicate, value string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", p),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereUpdatedUserIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) WhereUpdatedUserNotIn(value []string) *accountQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *accountQueryBuilder) OrderByUpdatedUser(asc bool) *accountQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_user "+order)
	return qb
}
