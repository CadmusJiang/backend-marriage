///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package org_info

import (
	"fmt"

	"github.com/xinliangnote/go-gin-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *OrgInfo {
	return new(OrgInfo)
}

func NewQueryBuilder() *orgInfoQueryBuilder {
	return new(orgInfoQueryBuilder)
}

func (t *OrgInfo) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return int32(t.Id), nil
}

type orgInfoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *orgInfoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *orgInfoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&OrgInfo{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *orgInfoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&OrgInfo{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *orgInfoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&OrgInfo{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *orgInfoQueryBuilder) First(db *gorm.DB) (*OrgInfo, error) {
	ret := &OrgInfo{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *orgInfoQueryBuilder) QueryOne(db *gorm.DB) (*OrgInfo, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *orgInfoQueryBuilder) QueryAll(db *gorm.DB) ([]*OrgInfo, error) {
	var ret []*OrgInfo
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *orgInfoQueryBuilder) Limit(limit int) *orgInfoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *orgInfoQueryBuilder) Offset(offset int) *orgInfoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *orgInfoQueryBuilder) WhereId(p mysql.Predicate, value uint64) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereIdIn(value []uint64) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereIdNotIn(value []uint64) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderById(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgName(p mysql.Predicate, value string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_name", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgNameIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_name", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgNameNotIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByOrgName(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "org_name "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgType(p mysql.Predicate, value int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_type", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgTypeIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_type", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgTypeNotIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByOrgType(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "org_type "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgPath(p mysql.Predicate, value string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_path", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgPathIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_path", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgPathNotIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_path", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByOrgPath(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "org_path "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgLevel(p mysql.Predicate, value int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_level", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgLevelIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_level", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereOrgLevelNotIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "org_level", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByOrgLevel(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "org_level "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereCurrentCnt(p mysql.Predicate, value int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "current_cnt", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereCurrentCntIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "current_cnt", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereCurrentCntNotIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "current_cnt", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByCurrentCnt(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "current_cnt "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereMaxCnt(p mysql.Predicate, value int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "max_cnt", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereMaxCntIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "max_cnt", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereMaxCntNotIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "max_cnt", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByMaxCnt(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "max_cnt "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereStatus(p mysql.Predicate, value int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereStatusIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereStatusNotIn(value []int32) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByStatus(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereExtData(p mysql.Predicate, value string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ext_data", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereExtDataIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ext_data", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereExtDataNotIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ext_data", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByExtData(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "ext_data "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereCreatedAt(p mysql.Predicate, value int64) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereCreatedAtIn(value []int64) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereCreatedAtNotIn(value []int64) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByCreatedAt(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value int64) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereUpdatedAtIn(value []int64) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereUpdatedAtNotIn(value []int64) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByUpdatedAt(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereCreatedUser(p mysql.Predicate, value string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereCreatedUserIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereCreatedUserNotIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByCreatedUser(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_user "+order)
	return qb
}

func (qb *orgInfoQueryBuilder) WhereUpdatedUser(p mysql.Predicate, value string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", p),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereUpdatedUserIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) WhereUpdatedUserNotIn(value []string) *orgInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orgInfoQueryBuilder) OrderByUpdatedUser(asc bool) *orgInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_user "+order)
	return qb
}
